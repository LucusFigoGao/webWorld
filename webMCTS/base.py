

class treeNode(object):
    def __init__(self, action, parent=None, depth=0) -> None:
        """
            构建一个节点需要知道节点的action(Policy model), 以及action之后的下一个状态(World model)
        """
        self.trace = ''                     # str, trace, a set of `raw_action`
        self.action = action                        # str, execute action generated by the Policy model
        self.state = None                                # str, generated by the World model
        self.parent = parent                       # treeNode
        self.numVisits = 0                               # int, visiting frequency
        self.V = 0                                       # float, value of node, generated by the World model
        self.children: dict = {}                         # dict[str: treeNode], set of child node
        self.depth = depth                          # int, tree depth
        self.isFullyExpanded = False                     # expanded, whether has childnode
        self.isTerminal = False                          # value acceptable, whether task finished
    
    # 当前节点下扩展子节点
    def append_children(self, action):
        node = treeNode(action, self, self.depth+1)
        node.update_trace_from_parent()
        self.children.update({action: node})
    
    # 当前节点下更新轨迹
    def update_trace_from_parent(self):
        """
            设计时应该查看policy model应该接受什么格式的轨迹数据(最好的总结形式是raw_action)
            <step>Let\'s think step-by-step. This page has a link whose ID is [169], which can be used to find directions between two points. 
                In this case, we want directions from Carnegie Mellon University to the top computer science school in Massachusetts, 
                which is MIT. Clicking on this link will probably take me to a page where I can input these two locations and find the 
                driving distance. In summary, the next action I will perform is ```click [169]```.</step>
            <step>Let\'s think step-by-step. To get the distance from Carnegie Mellon University to the top computer science school in 
                Massachusetts, which is Massachusetts Institute of Technology (MIT), I need to input "Carnegie Mellon University" in the 
                "From" textbox and "Massachusetts Institute of Technology" in the "To" textbox, and then click "Go" button. The IDs of the 
                "From" textbox, "To" textbox, and "Go" button are [567], [569], and [556] respectively. First, I will type "Carnegie Mellon 
                University" in the "From" textbox. In summary, the next action I will perform is ```type [567] [Carnegie Mellon University] [0]```</step>
            <step>Let\'s think step-by-step. The previous action was to type Carnegie Mellon University into the "From" box. Now, we need to 
                type the destination into the "To" box. The top computer science school in Massachusetts is Massachusetts Institute of Technology (MIT). 
                So, I will type "MIT" into the "To" box and submit the form by pressing the "Enter" key afterwards. In summary, the next action I 
                will perform is ```type [569] [MIT] [1]```</step>
        """
        if self.parent is None:
            self.trace = self.action
        else:
            self.trace = self.parent.trace + "<step>" + self.action + "</step>"
    
    # 更新节点价值
    def update_value(self, value):
        self.V = value
    
    # 更新节点状态
    def update_state(self, state):
        self.state = state
    
    